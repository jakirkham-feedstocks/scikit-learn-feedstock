From 918e0080c62646d4c8426fb24444edd89e732f54 Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Wed, 28 Feb 2018 20:48:08 +1100
Subject: [PATCH 1/8] FIX report n_iter_ faithfully to scipy.optimize

---
 doc/whats_new/v0.20.rst                     | 5 +++++
 sklearn/linear_model/logistic.py            | 2 +-
 sklearn/linear_model/tests/test_logistic.py | 3 ++-
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git doc/whats_new/v0.20.rst doc/whats_new/v0.20.rst
index 99aaefa57b67..46f055cbb5fd 100644
--- doc/whats_new/v0.20.rst
+++ doc/whats_new/v0.20.rst
@@ -382,6 +382,11 @@ Linear, kernelized and related models
   underlying implementation is broken. Use :class:`linear_model.Lasso` instead.
   :issue:`9837` by `Alexandre Gramfort`_.
 
+- :class:`linear_model.LogisticRegression` with ``solver='lbfgs'`` formerly
+  reported 1 less iteration in ``n_iter_`` than :mod:`scipy.optimize` returned.
+  It now reports the returned number of iterations faithfully, although this
+  may vary across SciPy versions. :issue:`10723` by `Joel Nothman`_.
+
 Metrics
 
 - Deprecate ``reorder`` parameter in :func:`metrics.auc` as it's no longer required
diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index d5bb7422f511..e95a5d223980 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -710,7 +710,7 @@ def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,
             if info["warnflag"] == 1 and verbose > 0:
                 warnings.warn("lbfgs failed to converge. Increase the number "
                               "of iterations.", ConvergenceWarning)
-            n_iter_i = info['nit'] - 1
+            n_iter_i = info['nit']
         elif solver == 'newton-cg':
             args = (X, target, 1. / C, sample_weight)
             w0, n_iter_i = newton_cg(hess, func, grad, w0, args=args,
diff --git sklearn/linear_model/tests/test_logistic.py sklearn/linear_model/tests/test_logistic.py
index 5812fd5ecf7f..2390f0e8849c 100644
--- sklearn/linear_model/tests/test_logistic.py
+++ sklearn/linear_model/tests/test_logistic.py
@@ -1050,7 +1050,8 @@ def test_max_iter():
                                         multi_class=multi_class,
                                         random_state=0, solver=solver)
                 lr.fit(X, y_bin)
-                assert_equal(lr.n_iter_[0], max_iter)
+                # scipy <= 1.0.0 may do extra iterations in lbfgs
+                assert lr.n_iter_[0] >= max_iter
 
 
 def test_n_iter():

From 024c7f9242f76d8527e8c199dea0e773c41f341c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Est=C3=A8ve?= <loic.esteve@ymail.com>
Date: Wed, 28 Feb 2018 15:40:45 +0100
Subject: [PATCH 2/8] Only relax the test for lbfgs solver and specific scipy
 versions

---
 sklearn/linear_model/tests/test_logistic.py | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git sklearn/linear_model/tests/test_logistic.py sklearn/linear_model/tests/test_logistic.py
index 2390f0e8849c..ed147f70a4a6 100644
--- sklearn/linear_model/tests/test_logistic.py
+++ sklearn/linear_model/tests/test_logistic.py
@@ -1,6 +1,11 @@
+from distutils.version import LooseVersion
+
 import numpy as np
+
+import scipy
 import scipy.sparse as sp
 from scipy import linalg, optimize, sparse
+
 from sklearn.datasets import load_iris, make_classification
 from sklearn.metrics import log_loss
 from sklearn.model_selection import StratifiedKFold
@@ -1050,8 +1055,15 @@ def test_max_iter():
                                         multi_class=multi_class,
                                         random_state=0, solver=solver)
                 lr.fit(X, y_bin)
-                # scipy <= 1.0.0 may do extra iterations in lbfgs
-                assert lr.n_iter_[0] >= max_iter
+                expected_n_iter = max_iter
+                # scipy <= 1.0.0 may do extra iterations in lbfgs. See
+                # https://github.com/scipy/scipy/issues/7854.
+                scipy_lbfgs_bug = (solver == 'lbfgs' and (
+                    LooseVersion(scipy.__version__) < '1' or
+                    LooseVersion(scipy.__version__) == '1.0.0'))
+                if scipy_lbfgs_bug:
+                    expected_n_iter += 1
+                assert lr.n_iter_[0] == expected_n_iter
 
 
 def test_n_iter():

From 75fec50b813d30fc311541e53a6b7dc7bc41ad82 Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Sun, 4 Mar 2018 08:28:27 +1100
Subject: [PATCH 3/8] Revert "FIX report n_iter_ faithfully to scipy.optimize"

This reverts commit 918e0080c62646d4c8426fb24444edd89e732f54.
---
 doc/whats_new/v0.20.rst                     | 5 -----
 sklearn/linear_model/logistic.py            | 2 +-
 sklearn/linear_model/tests/test_logistic.py | 3 +--
 3 files changed, 2 insertions(+), 8 deletions(-)

diff --git doc/whats_new/v0.20.rst doc/whats_new/v0.20.rst
index 46f055cbb5fd..99aaefa57b67 100644
--- doc/whats_new/v0.20.rst
+++ doc/whats_new/v0.20.rst
@@ -382,11 +382,6 @@ Linear, kernelized and related models
   underlying implementation is broken. Use :class:`linear_model.Lasso` instead.
   :issue:`9837` by `Alexandre Gramfort`_.
 
-- :class:`linear_model.LogisticRegression` with ``solver='lbfgs'`` formerly
-  reported 1 less iteration in ``n_iter_`` than :mod:`scipy.optimize` returned.
-  It now reports the returned number of iterations faithfully, although this
-  may vary across SciPy versions. :issue:`10723` by `Joel Nothman`_.
-
 Metrics
 
 - Deprecate ``reorder`` parameter in :func:`metrics.auc` as it's no longer required
diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index e95a5d223980..d5bb7422f511 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -710,7 +710,7 @@ def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,
             if info["warnflag"] == 1 and verbose > 0:
                 warnings.warn("lbfgs failed to converge. Increase the number "
                               "of iterations.", ConvergenceWarning)
-            n_iter_i = info['nit']
+            n_iter_i = info['nit'] - 1
         elif solver == 'newton-cg':
             args = (X, target, 1. / C, sample_weight)
             w0, n_iter_i = newton_cg(hess, func, grad, w0, args=args,
diff --git sklearn/linear_model/tests/test_logistic.py sklearn/linear_model/tests/test_logistic.py
index 2390f0e8849c..5812fd5ecf7f 100644
--- sklearn/linear_model/tests/test_logistic.py
+++ sklearn/linear_model/tests/test_logistic.py
@@ -1050,8 +1050,7 @@ def test_max_iter():
                                         multi_class=multi_class,
                                         random_state=0, solver=solver)
                 lr.fit(X, y_bin)
-                # scipy <= 1.0.0 may do extra iterations in lbfgs
-                assert lr.n_iter_[0] >= max_iter
+                assert_equal(lr.n_iter_[0], max_iter)
 
 
 def test_n_iter():

From 77075b7d9b550790f5a87e5c7c706f06006737de Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Sun, 4 Mar 2018 08:31:46 +1100
Subject: [PATCH 4/8] FIX report min(n_iter, max_iter) as n_iter_ in lbfgs

---
 sklearn/linear_model/logistic.py | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index d5bb7422f511..8feea15cf90d 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -710,7 +710,8 @@ def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,
             if info["warnflag"] == 1 and verbose > 0:
                 warnings.warn("lbfgs failed to converge. Increase the number "
                               "of iterations.", ConvergenceWarning)
-            n_iter_i = info['nit'] - 1
+            # in scipy <= 1.0.0, nit may exceed maxiter
+            n_iter_i = min(info['nit'], max_iter)
         elif solver == 'newton-cg':
             args = (X, target, 1. / C, sample_weight)
             w0, n_iter_i = newton_cg(hess, func, grad, w0, args=args,
@@ -1109,6 +1110,9 @@ class LogisticRegression(BaseEstimator, LinearClassifierMixin,
         it returns only 1 element. For liblinear solver, only the maximum
         number of iteration across all classes is given.
 
+        Note: in SciPy <= 1.0.0 the number of lbfgs iterations may exceed
+        ``max_iter``. ``n_iter_`` will report at most ``max_iter``.
+
     See also
     --------
     SGDClassifier : incrementally trained logistic regression (when given

From e87cedc586754649866fc6a46cb7b92b897b60b5 Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Sun, 4 Mar 2018 08:35:00 +1100
Subject: [PATCH 5/8] Complete reversion

---
 sklearn/linear_model/tests/test_logistic.py | 5 -----
 1 file changed, 5 deletions(-)

diff --git sklearn/linear_model/tests/test_logistic.py sklearn/linear_model/tests/test_logistic.py
index 6258f45c3377..5812fd5ecf7f 100644
--- sklearn/linear_model/tests/test_logistic.py
+++ sklearn/linear_model/tests/test_logistic.py
@@ -1,11 +1,6 @@
-from distutils.version import LooseVersion
-
 import numpy as np
-
-import scipy
 import scipy.sparse as sp
 from scipy import linalg, optimize, sparse
-
 from sklearn.datasets import load_iris, make_classification
 from sklearn.metrics import log_loss
 from sklearn.model_selection import StratifiedKFold

From 9cc65938cabffee5931daaf88393288134690cd1 Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Sun, 4 Mar 2018 20:31:19 +1100
Subject: [PATCH 6/8] make the huber case consistent

---
 doc/whats_new/v0.20.rst                  | 7 +++++++
 sklearn/linear_model/huber.py            | 8 ++++++--
 sklearn/linear_model/logistic.py         | 6 ++++--
 sklearn/linear_model/tests/test_huber.py | 7 +++++++
 4 files changed, 24 insertions(+), 4 deletions(-)

diff --git doc/whats_new/v0.20.rst doc/whats_new/v0.20.rst
index 99aaefa57b67..fa94279219c6 100644
--- doc/whats_new/v0.20.rst
+++ doc/whats_new/v0.20.rst
@@ -382,6 +382,13 @@ Linear, kernelized and related models
   underlying implementation is broken. Use :class:`linear_model.Lasso` instead.
   :issue:`9837` by `Alexandre Gramfort`_.
 
+- ``n_iter_`` may vary from previous releases in
+  :class:`linear_model.LogisticRegression` with ``solver='lbfgs'`` and
+  :class:`linear_model.HuberRegressor`.  For Scipy <= 1, the optimizer could
+  perform more than the requested maximum number of iterations. Now both
+  estimators will report at most ``max_iter`` iterations even if more were
+  performed. :issue:`10723` by `Joel Nothman`_.
+
 Metrics
 
 - Deprecate ``reorder`` parameter in :func:`metrics.auc` as it's no longer required
diff --git sklearn/linear_model/huber.py sklearn/linear_model/huber.py
index fd744ee2fcb9..c0f0b254e24d 100644
--- sklearn/linear_model/huber.py
+++ sklearn/linear_model/huber.py
@@ -182,7 +182,11 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):
 
     n_iter_ : int
         Number of iterations that fmin_l_bfgs_b has run for.
-        Not available if SciPy version is 0.9 and below.
+
+        .. versionchanged:: 0.20
+
+            In SciPy <= 1.0.0 the number of lbfgs iterations may exceed
+            ``max_iter``. ``n_iter_`` will now report at most ``max_iter``.
 
     outliers_ : array, shape (n_samples,)
         A boolean mask which is set to True where the samples are identified
@@ -264,7 +268,7 @@ def fit(self, X, y, sample_weight=None):
             raise ValueError("HuberRegressor convergence failed:"
                              " l-BFGS-b solver terminated with %s"
                              % dict_['task'].decode('ascii'))
-        self.n_iter_ = dict_['nit']
+        self.n_iter_ = min(dict_['nit'], self.max_iter)
         self.scale_ = parameters[-1]
         if self.fit_intercept:
             self.intercept_ = parameters[-2]
diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index 8feea15cf90d..236ef3e37d17 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -1110,8 +1110,10 @@ class LogisticRegression(BaseEstimator, LinearClassifierMixin,
         it returns only 1 element. For liblinear solver, only the maximum
         number of iteration across all classes is given.
 
-        Note: in SciPy <= 1.0.0 the number of lbfgs iterations may exceed
-        ``max_iter``. ``n_iter_`` will report at most ``max_iter``.
+        .. versionchanged:: 0.20
+
+            In SciPy <= 1.0.0 the number of lbfgs iterations may exceed
+            ``max_iter``. ``n_iter_`` will nowreport at most ``max_iter``.
 
     See also
     --------
diff --git sklearn/linear_model/tests/test_huber.py sklearn/linear_model/tests/test_huber.py
index 08f4fdf281b3..ca1092fcd46b 100644
--- sklearn/linear_model/tests/test_huber.py
+++ sklearn/linear_model/tests/test_huber.py
@@ -42,6 +42,13 @@ def test_huber_equals_lr_for_high_epsilon():
     assert_almost_equal(huber.intercept_, lr.intercept_, 2)
 
 
+def test_huber_max_iter():
+    X, y = make_regression_with_outliers()
+    huber = HuberRegressor(max_iter=1)
+    huber.fit(X, y)
+    assert huber.n_iter_ == huber.max_iter
+
+
 def test_huber_gradient():
     # Test that the gradient calculated by _huber_loss_and_gradient is correct
     rng = np.random.RandomState(1)

From 1bc55422c1495623631a1b6a00c6f318fd827360 Mon Sep 17 00:00:00 2001
From: Joel Nothman <joel.nothman@gmail.com>
Date: Sun, 4 Mar 2018 21:11:02 +1100
Subject: [PATCH 7/8] DOC missing space

---
 sklearn/linear_model/logistic.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index 236ef3e37d17..bb0f013a2e94 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -1113,7 +1113,7 @@ class LogisticRegression(BaseEstimator, LinearClassifierMixin,
         .. versionchanged:: 0.20
 
             In SciPy <= 1.0.0 the number of lbfgs iterations may exceed
-            ``max_iter``. ``n_iter_`` will nowreport at most ``max_iter``.
+            ``max_iter``. ``n_iter_`` will now report at most ``max_iter``.
 
     See also
     --------

From b125afe5f5c6719f3bf14bf05b126631c35a96fa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Est=C3=A8ve?= <loic.esteve@ymail.com>
Date: Mon, 5 Mar 2018 10:25:09 +0100
Subject: [PATCH 8/8] Minor tweaks

---
 doc/whats_new/v0.20.rst          | 2 +-
 sklearn/linear_model/huber.py    | 2 ++
 sklearn/linear_model/logistic.py | 3 ++-
 3 files changed, 5 insertions(+), 2 deletions(-)

diff --git doc/whats_new/v0.20.rst doc/whats_new/v0.20.rst
index fa94279219c6..f3dd799d8b72 100644
--- doc/whats_new/v0.20.rst
+++ doc/whats_new/v0.20.rst
@@ -384,7 +384,7 @@ Linear, kernelized and related models
 
 - ``n_iter_`` may vary from previous releases in
   :class:`linear_model.LogisticRegression` with ``solver='lbfgs'`` and
-  :class:`linear_model.HuberRegressor`.  For Scipy <= 1, the optimizer could
+  :class:`linear_model.HuberRegressor`.  For Scipy <= 1.0.0, the optimizer could
   perform more than the requested maximum number of iterations. Now both
   estimators will report at most ``max_iter`` iterations even if more were
   performed. :issue:`10723` by `Joel Nothman`_.
diff --git sklearn/linear_model/huber.py sklearn/linear_model/huber.py
index c0f0b254e24d..b6f4658ea573 100644
--- sklearn/linear_model/huber.py
+++ sklearn/linear_model/huber.py
@@ -268,6 +268,8 @@ def fit(self, X, y, sample_weight=None):
             raise ValueError("HuberRegressor convergence failed:"
                              " l-BFGS-b solver terminated with %s"
                              % dict_['task'].decode('ascii'))
+        # In scipy <= 1.0.0, nit may exceed maxiter.
+        # See https://github.com/scipy/scipy/issues/7854.
         self.n_iter_ = min(dict_['nit'], self.max_iter)
         self.scale_ = parameters[-1]
         if self.fit_intercept:
diff --git sklearn/linear_model/logistic.py sklearn/linear_model/logistic.py
index bb0f013a2e94..26eaeaa029f1 100644
--- sklearn/linear_model/logistic.py
+++ sklearn/linear_model/logistic.py
@@ -710,7 +710,8 @@ def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,
             if info["warnflag"] == 1 and verbose > 0:
                 warnings.warn("lbfgs failed to converge. Increase the number "
                               "of iterations.", ConvergenceWarning)
-            # in scipy <= 1.0.0, nit may exceed maxiter
+            # In scipy <= 1.0.0, nit may exceed maxiter.
+            # See https://github.com/scipy/scipy/issues/7854.
             n_iter_i = min(info['nit'], max_iter)
         elif solver == 'newton-cg':
             args = (X, target, 1. / C, sample_weight)
